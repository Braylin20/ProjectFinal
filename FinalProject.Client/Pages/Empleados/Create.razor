@page "/CreateEmpleado"
@rendermode InteractiveAuto
@inject NotificationService notificationService
@inject EmpleadoServices empleadoServices
@attribute [StreamRendering]

<RadzenNotification />



else
{
    <EditForm Model="empleado" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        
        <div class="container-fluid">
            <div class="card shadow-lg w-50 mx-auto">
                <div class="card-header">
                    <h3 class="text-center text-white">Registro Audiencia</h3>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-6">
                            <label class="fw-bold mb-2">Fecha de Creacion</label>
                            <InputDate @bind-Value="empleado.FechaCreacion" class="form-control mb-3" readOnly/>
                            <ValidationMessage For="@(()=>empleado.FechaCreacion)" />
                        </div>
                        <div class="col-6">
                            <label class="fw-bold mb-2">Correo Electronico</label>
                            <InputText @bind-Value="empleado.Correo" class="form-control"></InputText>
                            <ValidationMessage For="@(() => empleado.Correo)"></ValidationMessage>
                        </div>
                        
                    </div>
                    <div class="row">
                        <div>
                            <label class="fw-bold mb-3">Clave</label>
                            <InputNumber @bind-Value="empleado.Clave" class="form-control" placeholder="Ingrese una contraseña" />
                            <ValidationMessage For="@(()=>empleado.Clave)" />
                        </div>

                    </div>
                </div>
                <div class="card-footer">
                    <div class="btn-group">
                        <a href="IndexEmpleado" class="btn btn-secondary">Atr&aacute;s</a>
                        <button type="submit" class="btn btn-success">Guardar</button>
                    </div>
                </div>
            </div>
            
        </div>
    </EditForm>
}


@code {
    public Empleados empleado { get; set; } = new Empleados();
    //private IEnumerable<Demandas>? ListaDemandas { get; set; } = new List<Demandas>();

    protected override async Task OnInitializedAsync()
    {
        // await Task.Delay(1000);
        
        empleado.FechaCreacion = DateTime.Now;
    }
    public async Task Guardar()
    {
        var guardado = await empleadoServices.Save(empleado);
        if(guardado is null)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "No se ha guardado correctamente",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
        }
        else
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Éxito",
                    Detail = "Se ha guardado correctamente",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
            empleado = new Empleados();
        }

    }
}
